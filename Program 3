#include<stdio.h>
#include<stdlib.h>

struct Process
{
    int process_id;
    int burst_time;
    int waiting_time;
    int turnaround_time;
};

int compare(const void *a, const void *b)
{
    return (((struct Process*)a)->burst_time - ((struct Process*)b)->burst_time);
}

void computeWaitingTime(struct Process processes[], int n)
{
    int i;
    processes[0].waiting_time = 0;

    for (i = 1; i < n; i++)
    {
        processes[i].waiting_time = processes[i - 1].burst_time + processes[i - 1].waiting_time;
    }
}

void computeTurnaroundTime(struct Process processes[], int n)
{
    int i;
    for (i = 0; i < n; i++)
    {
        processes[i].turnaround_time = processes[i].burst_time + processes[i].waiting_time;
    }
}

void SJF_Scheduling(struct Process processes[], int n)
{
    int i;

    qsort(processes, n, sizeof(struct Process), compare);

    computeWaitingTime(processes, n);

    computeTurnaroundTime(processes, n);

    printf("Process\t\tBurst Time\tWaiting Time\tTurnaround Time\n");

    for (i = 0; i < n; i++)
    {
        printf("%d\t\t%d\t\t%d\t\t%d\n", processes[i].process_id, processes[i].burst_time, processes[i].waiting_time, processes[i].turnaround_time);
    }

    int total_waiting_time = 0;
    int total_turnaround_time = 0;
    for (i = 0; i < n; i++)
    {
        total_waiting_time += processes[i].waiting_time;
        total_turnaround_time += processes[i].turnaround_time;
    }

    printf("Average Waiting Time: %.2f\n", (float)total_waiting_time / (float)n);
    printf("Average Turnaround Time: %.2f\n", (float)total_turnaround_time / (float)n);
}

int main()
{
    struct Process processes[] = {{1, 6, 0, 0}, {2, 8, 0, 0}, {3, 7, 0, 0}, {4, 3, 0, 0}};
    int n = sizeof(processes) / sizeof(processes[0]);

    SJF_Scheduling(processes, n);

    return 0;
}
