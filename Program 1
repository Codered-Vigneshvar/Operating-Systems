#include <stdio.h>

#define NUM_PROCESSES 4
#define NUM_RESOURCES 3

int claim[NUM_PROCESSES][NUM_RESOURCES] = { {3, 2, 2},
                                             {6, 1, 3},
                                             {3, 1, 4},
                                             {4, 2, 2} };
int allocation[NUM_PROCESSES][NUM_RESOURCES] = { {1, 0, 0},
                                                 {6, 1, 2},
                                                 {2, 1, 1},
                                                 {0, 0, 2} };
int available[NUM_RESOURCES] = {9, 3, 6};
int work[NUM_RESOURCES];
int finish[NUM_PROCESSES];

int is_safe_state() {
    int i, j, k;
    for (i = 0; i < NUM_RESOURCES; i++) {
        work[i] = available[i];
    }
    for (i = 0; i < NUM_PROCESSES; i++) {
        finish[i] = 0;
    }
    for (i = 0; i < NUM_PROCESSES; i++) {
        for (j = 0; j < NUM_PROCESSES; j++) {
            if (finish[j] == 0) {
                int flag = 1;
                for (k = 0; k < NUM_RESOURCES; k++) {
                    if (claim[j][k] - allocation[j][k] > work[k]) {
                        flag = 0;
                        break;
                    }
                }
                if (flag) {
                    for (k = 0; k < NUM_RESOURCES; k++) {
                        work[k] = work[k] + allocation[j][k];
                    }
                    finish[j] = 1;
                }
            }
        }
    }
    for (i = 0; i < NUM_PROCESSES; i++) {
        if (finish[i] == 0) {
            return 0;
        }
    }
    return 1;
}

int main() {
    if (is_safe_state()) {
        printf("The system is in a safe state.\n");
    } else {
        printf("The system is in an unsafe state.\n");
    }
    return 0;
}
